#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'strscan'

module ActiveCassandra

class SQLParser < Racc::Parser

module_eval(<<'...end sqlparser.y/module_eval...', 'sqlparser.y', 225)

KEYWORDS = %w(
  AND
  AS
  ASC
  BETWEEN
  BY
  COUNT
  DELETE
  DESC
  DISTINCT
  FROM
  IN
  INSERT
  INTO
  LIMIT
  NOT
  OFFSET
  ORDER
  REGEXP
  SELECT
  SET
  UPDATE
  VALUES
  WHERE
)

KEYWORD_REGEXP = Regexp.compile("(?:#{KEYWORDS.join '|'})\\b", Regexp::IGNORECASE)

def initialize(obj)
  src = obj.is_a?(IO) ? obj.read : obj.to_s
  @ss = StringScanner.new(src)
end

def scan
  piece = nil

  until @ss.eos?
    if (tok = @ss.scan /\s+/)
      # nothing to do
    elsif (tok = @ss.scan /(?:<>|!=|>=|<=|>|<|=)/)
      yield [tok, tok]
    elsif (tok = @ss.scan KEYWORD_REGEXP)
      yield [tok.upcase.to_sym, tok]
    elsif (tok = @ss.scan /NULL\b/i)
      yield [:NULL, nil]
    elsif (tok = @ss.scan /'(?:[^']|'')*'/) #'
      yield [:STRING, tok.slice(1...-1).gsub(/''/, "'")]
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)(?:\.\d+)/)
      yield [:NUMBER, tok.to_f]
    elsif (tok = @ss.scan /-?(?:0|[1-9]\d*)/)
      yield [:NUMBER, tok.to_i]
    elsif (tok = @ss.scan /[,\(\)\*]/)
      yield [tok, tok]
    elsif (tok = @ss.scan /(?:[a-z_]\w+\.|[a-z]\.)*ID\b/i)
      yield [:ID, tok]
    elsif (tok = @ss.scan /(?:[a-z_]\w+\.|[a-z]\.)*(?:[a-z_]\w+|[a-z])/i)
      yield [:IDENTIFIER, tok]
    else
      raise Racc::ParseError, ('parse error on value "%s"' % @ss.rest.inspect)
    end
  end

  yield [false, '$']
end
private :scan

def parse
  yyparse self, :scan
end

...end sqlparser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,   122,   101,   105,    18,     7,   124,   125,   130,   128,
   129,    77,    77,   132,    74,    65,   136,   138,    63,    77,
    72,    71,    72,    71,     8,    60,    60,     9,    73,    56,
    73,   131,    55,    60,    91,    83,   131,    18,    18,   131,
   131,    28,    56,   139,    68,    18,    60,    13,    15,    36,
    16,    84,    85,    86,    87,    88,    89,    90,    18,    91,
    83,    18,    82,    81,    72,    71,   131,    18,    18,    42,
    78,    79,    73,   112,   113,    65,    84,    85,    86,    87,
    88,    89,    90,    74,    50,    72,    71,    72,    71,    72,
    71,    72,    71,    73,    28,    73,    29,    73,    27,    73,
    72,    71,    72,    71,    72,    71,    72,    71,    73,    18,
    73,    93,    73,    95,    73,    72,    71,    96,    95,    42,
    26,   100,    18,    73,    18,    51,   103,    24,    48,   107,
    18,   109,   111,    22,    18,   111,    42,    18,   119,   120,
    21,    42,    18,    42,    18,    18,    18,    18,    33,    11,
    18,    10,    31 ]

racc_action_check = [
     0,   108,    76,    80,    68,     0,   111,   111,   116,   114,
   114,    77,    74,   118,    76,    47,   123,   134,    44,    55,
   108,   108,    80,    80,     0,    77,    74,     0,   108,    55,
    80,   116,    42,    55,    92,    92,   118,    77,    74,   123,
   134,    44,    42,   135,    48,    55,    42,     7,     7,    27,
     7,    92,    92,    92,    92,    92,    92,    92,    42,    59,
    59,    50,    59,    59,    51,    51,   135,    27,     7,    39,
    56,    56,    51,    95,    95,    45,    59,    59,    59,    59,
    59,    59,    59,    53,    39,   119,   119,   120,   120,   122,
   122,    78,    78,   119,    17,   120,    20,   122,    15,    78,
   131,   131,   105,   105,   103,   103,    81,    81,   131,    60,
   105,    63,   103,    64,    81,   109,   109,    65,    67,    46,
    14,    75,    21,   109,    13,    41,    79,    12,    35,    82,
    11,    93,    94,    10,    96,    97,    34,    33,   106,   107,
     9,    32,    31,    30,     8,    29,    28,    26,    25,     6,
    24,     1,    23 ]

racc_action_pointer = [
    -2,   151,   nil,   nil,   nil,   nil,   146,    38,   114,   132,
   133,   100,   119,    94,   112,    94,   nil,    66,   nil,   nil,
    69,    92,   nil,   148,   120,   140,   117,    37,   116,   115,
   130,   112,   128,   107,   123,   123,   nil,   nil,   nil,    56,
   nil,   110,    28,   nil,    13,    55,   106,    -5,    33,   nil,
    31,    41,   nil,    66,   nil,    15,    55,   nil,   nil,    44,
    79,   nil,   nil,   105,    91,    96,   nil,    96,   -26,   nil,
   nil,   nil,   nil,   nil,     8,   116,    -3,     7,    68,   122,
    -1,    83,   113,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,   127,   107,    50,   104,   110,   nil,   nil,
   nil,   nil,   nil,    81,   nil,    79,   121,   135,    -3,    92,
   nil,   -17,   nil,   nil,   -30,   nil,     3,   nil,     8,    62,
    64,   nil,    66,    11,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    77,   nil,   nil,    12,    38,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -68,   -68,    -1,    -2,    -3,    -4,   -68,   -68,   -68,   -68,
   -68,   -68,   -68,   -68,   -68,   -68,   -13,   -14,   -49,   -50,
   -68,   -68,   140,   -68,   -68,   -68,   -68,   -68,   -68,   -68,
   -15,   -68,   -15,   -68,   -15,   -68,   -11,   -12,   -51,   -15,
   -45,   -68,   -68,   -48,   -68,   -34,   -15,   -34,    -9,   -44,
   -68,   -68,   -16,   -17,   -18,   -68,   -68,   -22,   -24,   -68,
   -68,   -30,   -31,   -68,   -38,   -68,    -7,   -38,   -68,   -46,
   -47,   -52,   -53,   -54,   -68,   -68,   -68,   -68,   -68,   -68,
   -68,   -68,   -68,   -57,   -58,   -59,   -60,   -61,   -62,   -63,
   -64,   -65,   -68,   -68,   -41,   -68,   -68,   -41,   -10,   -23,
   -19,   -25,   -20,   -68,   -26,   -68,   -68,   -68,   -68,   -68,
    -6,   -68,   -39,   -40,   -36,    -8,   -68,   -55,   -68,   -68,
   -68,   -27,   -68,   -68,   -42,   -43,   -35,   -37,   -66,   -67,
   -21,   -68,   -28,   -32,   -68,   -68,    -5,   -56,   -33,   -29 ]

racc_goto_table = [
    19,    20,    70,    80,    23,    54,    25,    40,    94,    17,
   110,    97,     4,   115,    30,     5,    14,    32,    75,    34,
    37,    38,    41,    64,    19,    67,    46,    35,    69,   102,
    52,   104,   106,    44,    53,   116,   108,   118,    12,     3,
    43,   123,    45,    41,    47,    99,     2,   126,   127,    49,
    39,     1,   134,    92,   135,   nil,    66,   nil,   nil,   121,
   nil,    98,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   133,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   137,   nil,   nil,   nil,   nil,   nil,   nil,   114 ]

racc_goto_check = [
     6,     6,    19,    22,     6,    18,     6,    28,    12,     7,
    13,    12,     4,    13,     6,     5,    14,     6,    18,     6,
     6,     6,     6,    11,     6,    11,     6,    15,    28,    19,
    16,    19,    19,     7,    17,     8,    22,     8,     9,     3,
    10,     8,    10,     6,    10,    20,     2,    25,    26,    10,
    27,     1,     8,     6,     8,   nil,    10,   nil,   nil,    19,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    19,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,    51,    46,    39,    12,    15,    -7,     2,   -68,    31,
    10,   -22,   -56,   -84,     9,     0,   -12,    -8,   -37,   -49,
   -29,   nil,   -56,   nil,   nil,   -67,   -66,    21,   -22 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,   117,
    57,    58,   nil,    61,    62,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  10, 43, :_reduce_5,
  8, 44, :_reduce_6,
  6, 44, :_reduce_7,
  8, 44, :_reduce_8,
  4, 55, :_reduce_9,
  6, 55, :_reduce_10,
  1, 56, :_reduce_none,
  1, 56, :_reduce_none,
  1, 50, :_reduce_13,
  1, 50, :_reduce_none,
  0, 51, :_reduce_15,
  2, 51, :_reduce_16,
  2, 51, :_reduce_17,
  1, 57, :_reduce_none,
  3, 57, :_reduce_19,
  3, 59, :_reduce_20,
  5, 59, :_reduce_21,
  1, 58, :_reduce_22,
  3, 58, :_reduce_23,
  1, 61, :_reduce_none,
  3, 61, :_reduce_25,
  3, 62, :_reduce_26,
  4, 62, :_reduce_27,
  5, 62, :_reduce_28,
  6, 62, :_reduce_29,
  1, 62, :_reduce_none,
  1, 62, :_reduce_none,
  5, 64, :_reduce_32,
  6, 65, :_reduce_33,
  0, 52, :_reduce_34,
  4, 52, :_reduce_35,
  0, 66, :_reduce_36,
  1, 66, :_reduce_none,
  0, 53, :_reduce_38,
  2, 53, :_reduce_39,
  2, 53, :_reduce_40,
  0, 54, :_reduce_41,
  2, 54, :_reduce_42,
  2, 54, :_reduce_43,
  5, 45, :_reduce_44,
  1, 68, :_reduce_none,
  3, 68, :_reduce_46,
  3, 69, :_reduce_47,
  4, 46, :_reduce_48,
  1, 47, :_reduce_none,
  1, 48, :_reduce_50,
  3, 48, :_reduce_51,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 60, :_reduce_none,
  1, 49, :_reduce_55,
  3, 49, :_reduce_56,
  1, 63, :_reduce_57,
  1, 63, :_reduce_58,
  1, 63, :_reduce_59,
  1, 63, :_reduce_60,
  1, 63, :_reduce_61,
  1, 63, :_reduce_62,
  1, 63, :_reduce_63,
  1, 63, :_reduce_64,
  1, 63, :_reduce_65,
  1, 67, :_reduce_66,
  1, 67, :_reduce_67 ]

racc_reduce_n = 68

racc_shift_n = 140

racc_token_table = {
  false => 0,
  :error => 1,
  :INSERT => 2,
  :INTO => 3,
  "(" => 4,
  ")" => 5,
  :VALUES => 6,
  :SELECT => 7,
  :FROM => 8,
  :DISTINCT => 9,
  :COUNT => 10,
  :AS => 11,
  "*" => 12,
  :WHERE => 13,
  :ID => 14,
  "=" => 15,
  :IN => 16,
  :AND => 17,
  :NOT => 18,
  :BETWEEN => 19,
  :ORDER => 20,
  :BY => 21,
  :LIMIT => 22,
  :NUMBER => 23,
  :STRING => 24,
  :OFFSET => 25,
  :UPDATE => 26,
  :SET => 27,
  "," => 28,
  :DELETE => 29,
  :IDENTIFIER => 30,
  :NULL => 31,
  :REGEXP => 32,
  "<>" => 33,
  "!=" => 34,
  ">=" => 35,
  "<=" => 36,
  ">" => 37,
  "<" => 38,
  :ASC => 39,
  :DESC => 40 }

racc_nt_base = 41

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "INSERT",
  "INTO",
  "\"(\"",
  "\")\"",
  "VALUES",
  "SELECT",
  "FROM",
  "DISTINCT",
  "COUNT",
  "AS",
  "\"*\"",
  "WHERE",
  "ID",
  "\"=\"",
  "IN",
  "AND",
  "NOT",
  "BETWEEN",
  "ORDER",
  "BY",
  "LIMIT",
  "NUMBER",
  "STRING",
  "OFFSET",
  "UPDATE",
  "SET",
  "\",\"",
  "DELETE",
  "IDENTIFIER",
  "NULL",
  "REGEXP",
  "\"<>\"",
  "\"!=\"",
  "\">=\"",
  "\"<=\"",
  "\">\"",
  "\"<\"",
  "ASC",
  "DESC",
  "$start",
  "sql",
  "create_statement",
  "read_statemant",
  "update_statemant",
  "delete_statemant",
  "id",
  "id_list",
  "value_list",
  "select_list",
  "where_clause",
  "order_by_clause",
  "limit_clause",
  "offset_clause",
  "count_clause",
  "count_arg",
  "id_search_condition",
  "search_condition",
  "id_predicate",
  "value",
  "boolean_primary",
  "predicate",
  "op",
  "between_predicate",
  "not_in_predicate",
  "ordering_spec",
  "order_spec",
  "set_clause_list",
  "set_clause" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

module_eval(<<'.,.,', 'sqlparser.y', 10)
  def _reduce_5(val, _values)
                                {:command => :insert, :table => val[2], :column_list => val[4], :value_list => val[8]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 15)
  def _reduce_6(val, _values)
                                {:command => :select, :table => val[3], :select_list => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 19)
  def _reduce_7(val, _values)
                                {:command => :select, :table => val[4], :select_list => val[2], :distinct => val[2], :condition => val[5]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 23)
  def _reduce_8(val, _values)
                                {:command => :select, :table => val[3], :count => val[1], :condition => val[4], :order => val[5], :limit => val[6], :offset => val[7]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 28)
  def _reduce_9(val, _values)
                                "count_all"
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 32)
  def _reduce_10(val, _values)
                                val[5]
                          
  end
.,.,

# reduce 11 omitted

# reduce 12 omitted

module_eval(<<'.,.,', 'sqlparser.y', 40)
  def _reduce_13(val, _values)
                                []
                          
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'sqlparser.y', 46)
  def _reduce_15(val, _values)
                                []
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 50)
  def _reduce_16(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 54)
  def _reduce_17(val, _values)
                                val[1]
                          
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'sqlparser.y', 60)
  def _reduce_19(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 65)
  def _reduce_20(val, _values)
                                val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 69)
  def _reduce_21(val, _values)
                                val[3]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 74)
  def _reduce_22(val, _values)
                                [val[0]].flatten
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 78)
  def _reduce_23(val, _values)
                                (val[0] << val[2]).flatten
                          
  end
.,.,

# reduce 24 omitted

module_eval(<<'.,.,', 'sqlparser.y', 84)
  def _reduce_25(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 89)
  def _reduce_26(val, _values)
                                {:name => val[0], :op => val[1], :expr => val[2]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 93)
  def _reduce_27(val, _values)
                                {:name => val[1], :op => val[2], :expr => val[3], :not => true}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 97)
  def _reduce_28(val, _values)
                                {:name => val[0], :op => val[1], :expr => val[3]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 101)
  def _reduce_29(val, _values)
                                {:name => val[1], :op => val[2], :expr => val[4], :not => true}
                          
  end
.,.,

# reduce 30 omitted

# reduce 31 omitted

module_eval(<<'.,.,', 'sqlparser.y', 108)
  def _reduce_32(val, _values)
                                {:name => val[0], :op => '$bt', :expr => [val[2], val[4]]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 113)
  def _reduce_33(val, _values)
                                {:name => val[0], :op => '$in', :expr => val[4], :not => true}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 118)
  def _reduce_34(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 122)
  def _reduce_35(val, _values)
                                {:name => val[2], :type => val[3]}
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 127)
  def _reduce_36(val, _values)
                                :asc
                          
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'sqlparser.y', 133)
  def _reduce_38(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 137)
  def _reduce_39(val, _values)
                                val[1].to_i
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 141)
  def _reduce_40(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 146)
  def _reduce_41(val, _values)
                                nil
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 150)
  def _reduce_42(val, _values)
                                val[1].to_i
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 154)
  def _reduce_43(val, _values)
                                val[1]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 159)
  def _reduce_44(val, _values)
                                {:command => :update, :table => val[1], :set_clause_list => val[3], :condition => val[4]}
                          
  end
.,.,

# reduce 45 omitted

module_eval(<<'.,.,', 'sqlparser.y', 165)
  def _reduce_46(val, _values)
                                val[0].merge val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 170)
  def _reduce_47(val, _values)
                              {val[0] => val[2]}
                        
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 175)
  def _reduce_48(val, _values)
                                {:command => :delete, :table => val[2], :condition => val[3]}
                          
  end
.,.,

# reduce 49 omitted

module_eval(<<'.,.,', 'sqlparser.y', 182)
  def _reduce_50(val, _values)
                                [val[0]]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 186)
  def _reduce_51(val, _values)
                                val[0] << val[2]
                          
  end
.,.,

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'sqlparser.y', 195)
  def _reduce_55(val, _values)
                                [val[0]]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 199)
  def _reduce_56(val, _values)
                                val[0] << val[2]
                          
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 202)
  def _reduce_57(val, _values)
     '$in'     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 203)
  def _reduce_58(val, _values)
     '$regexp' 
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 204)
  def _reduce_59(val, _values)
     :'!='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 205)
  def _reduce_60(val, _values)
     :'!='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 206)
  def _reduce_61(val, _values)
     :'>='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 207)
  def _reduce_62(val, _values)
     :'<='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 208)
  def _reduce_63(val, _values)
     :'>'      
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 209)
  def _reduce_64(val, _values)
     :'<'      
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 210)
  def _reduce_65(val, _values)
     :'=='     
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 212)
  def _reduce_66(val, _values)
     :asc  
  end
.,.,

module_eval(<<'.,.,', 'sqlparser.y', 213)
  def _reduce_67(val, _values)
     :desc 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class SQLParser


end # module ActiveCassandra
